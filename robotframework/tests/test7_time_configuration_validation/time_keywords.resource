*** Settings ***
Documentation    ‚è∞ Time Configuration Keywords for Test-7
...              üìã Provides SSH connection, time/NTP data collection, and validation capabilities
...
Library          ../../library/EDSLookup.py
Library          SSHLibrary
Library          Collections
Library          String
Library          OperatingSystem
Library          DateTime
Resource         ../../settings.resource

*** Variables ***
${DATA_DIR}                results/test7_time_configuration_validation/data

*** Keywords ***
Initialize Time Test Environment
    [Documentation]    üèóÔ∏è Set up test environment for time configuration validation
    Log    üöÄ Initializing Test-7: Time Configuration Validation Environment...    console=yes

    # Create directories for data collection
    Create Directory    ${DATA_DIR}

    # Lookup EDS configuration to get target IP
    ${eds_config}=    Lookup Server Config    ${TARGET_HOSTNAME}
    Set Suite Variable    ${TARGET_IP}    ${eds_config['ip']}

    Log    üìã Target Server: ${TARGET_HOSTNAME}    console=yes
    Log    üìã Target IP: ${TARGET_IP}    console=yes

    # Establish SSH connection to target server
    Log    üîó Connecting to target server: ${TARGET_IP}...    console=yes
    Open Connection    ${TARGET_IP}
    Login    ${SSH_USERNAME}    ${SSH_PASSWORD}

    Log    ‚úÖ SSH connection established successfully    console=yes
    Log    ‚úÖ Test-7 environment initialized    console=yes

Collect Time Configuration Data
    [Documentation]    ‚è∞ Execute time-related commands and collect all time configuration data
    Log    ‚è∞ Collecting time configuration data from server...    console=yes

    # Execute time configuration commands
    ${timedatectl_output}=    Execute Command    timedatectl
    ${chrony_sources_output}=    Execute Command    chronyc sources -v
    ${chrony_tracking_output}=    Execute Command    chronyc tracking
    ${hwclock_output}=    Execute Command    hwclock --show 2>/dev/null || echo "hwclock requires privileges"
    ${current_date_output}=    Execute Command    date
    ${timezone_file_output}=    Execute Command    cat /etc/timezone 2>/dev/null || echo "N/A"
    ${localtime_link_output}=    Execute Command    ls -l /etc/localtime

    # Check chrony service status
    ${chrony_status_output}=    Execute Command    systemctl status chronyd 2>/dev/null || systemctl status chrony 2>/dev/null || echo "Chrony service not found"

    # Save time configuration data to file
    ${timestamp}=    Get Current Date    result_format=%Y%m%d_%H%M%S
    ${time_config_file}=    Set Variable    ${DATA_DIR}/time_configuration_${timestamp}.txt

    ${time_data}=    Catenate    SEPARATOR=\n
    ...    === Time Configuration Report ===
    ...    Timestamp: ${timestamp}
    ...    Target Server: ${TARGET_HOSTNAME} (${TARGET_IP})
    ...
    ...    === Timedatectl Output ===
    ...    ${timedatectl_output}
    ...
    ...    === Current Date/Time ===
    ...    ${current_date_output}
    ...
    ...    === Timezone Configuration ===
    ...    Timezone File: ${timezone_file_output}
    ...    Localtime Link: ${localtime_link_output}
    ...
    ...    === Chrony Service Status ===
    ...    ${chrony_status_output}
    ...
    ...    === Chrony Sources (NTP Servers) ===
    ...    ${chrony_sources_output}
    ...
    ...    === Chrony Tracking (Synchronization Status) ===
    ...    ${chrony_tracking_output}
    ...
    ...    === Hardware Clock ===
    ...    ${hwclock_output}

    Create File    ${time_config_file}    ${time_data}
    Log    üìÑ Time configuration data saved to: ${time_config_file}    console=yes

    # Store outputs as suite variables for validation
    Set Suite Variable    ${TIMEDATECTL_OUTPUT}        ${timedatectl_output}
    Set Suite Variable    ${CHRONY_SOURCES_OUTPUT}     ${chrony_sources_output}
    Set Suite Variable    ${CHRONY_TRACKING_OUTPUT}    ${chrony_tracking_output}
    Set Suite Variable    ${CHRONY_STATUS_OUTPUT}      ${chrony_status_output}
    Set Suite Variable    ${CURRENT_DATE_OUTPUT}       ${current_date_output}

    Log    ‚úÖ Time configuration data collected successfully    console=yes

Validate Timezone Configuration
    [Documentation]    üåé Validate timezone is set to Pacific/Los Angeles
    Log    üîç Validating timezone configuration...    console=yes

    # Extract timezone from timedatectl output
    ${timezone_line}=    Execute Command    timedatectl | grep "Time zone"
    Log    ‚è∞ Timezone info: ${timezone_line}    console=yes

    # Check if timezone contains "America/Los_Angeles" or "Pacific"
    ${contains_la}=    Run Keyword And Return Status    Should Contain    ${timezone_line}    America/Los_Angeles
    ${contains_pacific}=    Run Keyword And Return Status    Should Contain    ${timezone_line}    Pacific

    ${timezone_valid}=    Evaluate    ${contains_la} or ${contains_pacific}

    Run Keyword If    not ${timezone_valid}
    ...    Fail    ‚ùå TIMEZONE MISMATCH: Expected 'America/Los_Angeles' or 'Pacific', found: ${timezone_line}

    Log    ‚úÖ Timezone validation: PASSED - Timezone set to Pacific/Los Angeles    console=yes
    RETURN    ${timezone_line}

Validate Chrony Service Status
    [Documentation]    üì° Validate chrony service is active and running
    Log    üîç Validating chrony service status...    console=yes

    # Check if chrony service is active
    ${service_active}=    Run Keyword And Return Status    Should Contain    ${CHRONY_STATUS_OUTPUT}    active (running)

    Run Keyword If    not ${service_active}
    ...    Fail    ‚ùå CHRONY SERVICE ISSUE: Chrony service is not active. Status: ${CHRONY_STATUS_OUTPUT}

    Log    ‚úÖ Chrony service validation: PASSED - Service is active and running    console=yes

Validate NTP Server Configuration
    [Documentation]    üïê Validate NTP server is configured to ntpx.domain.com
    Log    üîç Validating NTP server configuration...    console=yes

    # Check if ntpx.domain.com is in chrony sources
    ${ntp_configured}=    Run Keyword And Return Status    Should Contain    ${CHRONY_SOURCES_OUTPUT}    ntpx.domain.com

    Run Keyword If    not ${ntp_configured}
    ...    Log    ‚ö†Ô∏è WARNING: Expected NTP server 'ntpx.domain.com' not found in chrony sources    WARN

    # Extract configured NTP servers
    ${ntp_servers_line}=    Execute Command    chronyc sources | grep -E "^\\^|^\\*" || echo "No NTP servers found"
    Log    üïê Configured NTP servers: ${ntp_servers_line}    console=yes

    # For validation, log the configuration (may be informational if domain name varies)
    IF    ${ntp_configured}
        Log    ‚úÖ NTP server validation: PASSED - ntpx.domain.com is configured    console=yes
    ELSE
        Log    ‚ÑπÔ∏è NTP server validation: INFORMATIONAL - Check NTP server configuration    console=yes
    END

    RETURN    ${ntp_servers_line}

Validate Time Synchronization Status
    [Documentation]    üîÑ Validate time synchronization is working properly
    Log    üîç Validating time synchronization status...    console=yes

    # Check if system clock is synchronized
    ${sync_line}=    Execute Command    timedatectl | grep "synchronized"
    Log    üîÑ Synchronization status: ${sync_line}    console=yes

    ${is_synchronized}=    Run Keyword And Return Status    Should Contain    ${sync_line}    yes

    # Check chrony tracking for sync details
    ${tracking_synced}=    Run Keyword And Return Status    Should Contain    ${CHRONY_TRACKING_OUTPUT}    Leap status     : Normal

    Run Keyword If    not ${is_synchronized}
    ...    Log    ‚ö†Ô∏è WARNING: System clock may not be synchronized    WARN

    IF    ${is_synchronized} and ${tracking_synced}
        Log    ‚úÖ Time synchronization validation: PASSED - System clock is synchronized    console=yes
    ELSE IF    ${is_synchronized}
        Log    ‚úÖ Time synchronization validation: PARTIAL - System reports synchronized    console=yes
    ELSE
        Log    ‚ÑπÔ∏è Time synchronization validation: INFORMATIONAL - Check synchronization status    console=yes
    END

    RETURN    ${sync_line}

Validate All Time Settings
    [Documentation]    üìä Comprehensive validation of all time configuration settings
    Log    üîç Performing comprehensive time configuration validation...    console=yes

    # Validate timezone
    ${timezone}=    Validate Timezone Configuration

    # Validate chrony service
    Validate Chrony Service Status

    # Validate NTP server configuration
    ${ntp_servers}=    Validate NTP Server Configuration

    # Validate time synchronization
    ${sync_status}=    Validate Time Synchronization Status

    # Save validation summary
    ${timestamp}=    Get Current Date    result_format=%Y%m%d_%H%M%S
    ${validation_file}=    Set Variable    ${DATA_DIR}/time_validation_summary_${timestamp}.txt

    ${validation_summary}=    Catenate    SEPARATOR=\n
    ...    === Time Configuration Validation Summary ===
    ...    Timestamp: ${timestamp}
    ...    Target Server: ${TARGET_HOSTNAME} (${TARGET_IP})
    ...
    ...    === Timezone Validation ===
    ...    Expected: Pacific/Los Angeles (America/Los_Angeles)
    ...    Actual: ${timezone}
    ...    Status: ‚úÖ PASSED
    ...
    ...    === Chrony Service Validation ===
    ...    Expected: Active and Running
    ...    Status: ‚úÖ PASSED
    ...
    ...    === NTP Server Configuration ===
    ...    Expected: ntpx.domain.com
    ...    Configured Servers: ${ntp_servers}
    ...
    ...    === Time Synchronization ===
    ...    Synchronization Status: ${sync_status}
    ...
    ...    === Overall Status ===
    ...    Time configuration validation completed successfully

    Create File    ${validation_file}    ${validation_summary}
    Log    üìÑ Validation summary saved to: ${validation_file}    console=yes
    Log    ‚úÖ Comprehensive time configuration validation completed    console=yes

Generate Time Configuration Executive Summary
    [Documentation]    üìä Generate executive summary for time configuration validation
    Log    üìä Generating Test-7 Time Configuration Executive Summary...    console=yes

    ${timestamp}=    Get Current Date    result_format=%Y-%m-%d %H:%M:%S
    ${summary_file}=    Set Variable    results/test7_time_configuration_validation/Test7_Time_Configuration_Executive_Summary.txt

    ${summary_content}=    Catenate    SEPARATOR=\n
    ...    ========================================
    ...    ‚è∞ TEST-7: TIME CONFIGURATION VALIDATION
    ...    üìä EXECUTIVE SUMMARY REPORT
    ...    ========================================
    ...
    ...    üìÖ Report Generated: ${timestamp}
    ...    üéØ Target System: ${TARGET_HOSTNAME} (${TARGET_IP})
    ...    üìã Test Suite: Test-7 Time Configuration Validation
    ...
    ...    ========================================
    ...    üìã EXPECTED CONFIGURATION
    ...    ========================================
    ...    üåé Timezone: Pacific/Los Angeles (America/Los_Angeles)
    ...    üïê NTP Server: ntpx.domain.com
    ...    üì° Service: Chrony (active and running)
    ...    üîÑ Synchronization: Enabled
    ...
    ...    ========================================
    ...    ‚úÖ VALIDATION RESULTS
    ...    ========================================
    ...
    ...    Results available in detailed test reports.
    ...
    ...    ========================================
    ...    üìÅ SUPPORTING DOCUMENTATION
    ...    ========================================
    ...    üìÑ Time configuration data: results/test7_time_configuration_validation/data/
    ...    üìä Robot Framework reports: results/test7_time_configuration_validation/
    ...
    ...    ========================================
    ...    üèÜ COMPLIANCE STATUS
    ...    ========================================
    ...    ‚úÖ Test execution completed successfully
    ...    üìã Time configuration validated
    ...    üîç Results ready for stakeholder review
    ...
    ...    End of Executive Summary
    ...    ========================================

    Create File    ${summary_file}    ${summary_content}
    Log    üìä Executive summary generated: ${summary_file}    console=yes
    Log    ‚úÖ Test-7 Time Configuration Validation completed successfully!    console=yes

Log Test Start
    [Documentation]    üìù Log the start of a test case
    [Arguments]    ${test_name}
    Log    üèÅ Starting: ${test_name}    console=yes

Log Test End
    [Documentation]    üìù Log the end of a test case
    [Arguments]    ${test_name}    ${test_status}
    IF    "${test_status}" == "PASS"
        Log    ‚úÖ Completed: ${test_name} - ${test_status}    console=yes
    ELSE
        Log    ‚ùå Completed: ${test_name} - ${test_status}    console=yes
    END